function users(root, args, context) {
    return context.prisma.users()
}

function projects(root, args, context) {
    return context.prisma.projects()
}


// At its core this is referencing type Query in the autogenerated PrismaSchema
// projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
// $where argument expects ProjectWhereInput type also declared in PrismaSchema
// ProjectWhereInput has a parameter 
// avi_roles_on_project: Avi_RolesWhereInput
// this destructuring will allow argument structure of:
// {
//     "rolesOfInterest": {
//       "avi_gaffer": false
//     }
//   } 
async function filterProjectsByRole(parent, args, context, info){
    const where = args.filter ? {
        "avi_roles_on_project": {...args.filter}
    } : {} 

    const projects = await context.prisma.projects({
        where
    })

    return projects
}



module.exports = {
    users,
    projects,
    filterProjectsByRole
}