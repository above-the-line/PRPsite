function createDraft(root, args, context) {
    return context.prisma.createPost({
        title: args.title,
        author: {
        connect: { id: args.userId },
        },
    })
}

function publish(root, args, context) {
    return context.prisma.updatePost({
        where: { id: args.postId },
        data: { published: true },
    })
}
  
function createUser(root, args, context) {
    return context.prisma.createUser({ name: args.name })
}

// I name this function this way in order
// to access the CRUD functions that
// were autogenerated in the Prisma client

function createProject(root, args, context) {
    return context.prisma.createProject({
            project_name: args.project_name,
            project_year: args.project_year,
            film_project: args.film_project,
            // I destructure the data being
            // submitted during a createProject
            // event in this way so as to match
            // the structure of the Prisma Client's 
            // auto generated input types
            avi_roles_on_project: { 
                // see input Avi_RolesCreateOneInput
                // in the prisma-schema.js
                create:                
                    {
                    avi_director: args.avi_roles_on_project.avi_director,
                    avi_gaffer: args.avi_roles_on_project.avi_gaffer,
                    avi_cinematographer: args.avi_roles_on_project.avi_gaffer
                }
            } 
    })
}

module.exports = {
    createDraft,
    publish,
    createUser,
    createProject
}