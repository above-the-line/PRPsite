const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const { APP_SECRET, getUserId } = require('../utils')



function createUser(root, args, context) {
    return context.prisma.createUser({ 
        user_name: args.user_name,
        user_email: args.user_email,
        user_password: args.user_password,
     })
}


async function signup(parent, args, context, info) {
    // encrypting the User’s password using the bcryptjs library
    // the const name must match var name being passed to GQL
    const user_password = await bcrypt.hash(args.user_password, 10)
    // use the prisma client instance to store the new User in the database
    
    const user = await context.prisma.createUser({
        ...args, user_password
    })
  
    // generating a JWT which is signed with an APP_SECRET
    const token = jwt.sign({ userId: user.id }, APP_SECRET)
    
    // return token and user as per spec of AuthPayload type
    return {
      token,
      user,
    }
  }
  
  async function login(parent, args, context, info) {
     // retrieve the existing User record by the email address
    // that was sent along as an argument in the login mutation. 
    // If no User with that email address was found, 
    // return a corresponding error.
    const user = await context.prisma.user({ user_email: args.user_email })
    if (!user) {
      throw new Error('No such user found')
    }
  
    // compare the provided password with the one that is stored 
    // in the database. If the two don’t match, return an error.
    const valid = await bcrypt.compare(args.user_password, user.user_password)
    if (!valid) {
      throw new Error('Invalid password')
    }
  
    const token = jwt.sign({ userId: user.id }, APP_SECRET)
  
    // return token and user as per spec of AuthPayload type
    return {
      token,
      user,
    }
  }
  






















// I name this function this way in order
// to access the CRUD functions that
// were autogenerated in the Prisma client

function createProject(root, args, context) {
    return context.prisma.createProject({
            project_name: args.project_name,
            project_year: args.project_year,
            film_project: args.film_project,
            // I destructure the data being
            // submitted during a createProject
            // event in this way so as to match
            // the structure of the Prisma Client's 
            // auto generated input types
            avi_roles_on_project: { 
                // see input Avi_RolesCreateOneInput
                // in the prisma-schema.js
                create:                
                    {
                    avi_director: args.avi_roles_on_project.avi_director,
                    avi_gaffer: args.avi_roles_on_project.avi_gaffer,
                    avi_cinematographer: args.avi_roles_on_project.avi_gaffer,
                    avi_writer: args.avi_roles_on_project.avi_writer,
                    avi_camera_operator: args.avi_roles_on_project.avi_camera_operator,
                    avi_lighting_technician: args.avi_roles_on_project.avi_lighting_technician,
                    avi_front_end_dev: args.avi_roles_on_project.avi_front_end_dev,
                    avi_back_end_dev: args.avi_roles_on_project.avi_back_end_dev,
                    avi_full_stack_dev: args.avi_roles_on_project.avi_full_stack_dev
                }
            },
            // Prisma Client's createProject resolves this project_media with a Media_ItemCreateMANYInput
            // which then resolves to Media_ItemCreateInput, hence the extra object encapsulation 
            // through "create"
            project_media: {
                create: {
                    banner_image_url: args.project_media.banner_image_url,
                    video_url: args.project_media.video_url  
                }
            },
            project_category: {
                create:
                {
                    short_film: args.project_category.short_film,
                    feature_film: args.project_category.feature_film
                }
            }

    })
}

module.exports = {
    createUser,
    createProject,
    signup,
    login,
}