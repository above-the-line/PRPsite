#
# USERS

type Query {
  users: [User]
  signup(user_email: String!, user_password: String!, user_name: String!): AuthPayload
  login(user_email: String!, user_password: String!): AuthPayload 
}

type Mutation {
  createUser(user_name: String!): User
}


type AuthPayload {
  token: String
  user: User
}


type User {
  id: ID!
  user_name: String!
  user_email: String! 
  user_password: String!
  user_role: User_Role
}

input UserCreateInput {
  user_name: String!
  user_email: String
  user_password: String
  user_role: User_Role
}


enum User_Role {
  VISITOR
  ADMIN
  CUSTOMER
}


# #########
#
# PROJECTS
#
#

type Query {
  projects: [Project]
}


type Mutation{
  createProject(
    project_name: String!,
    project_year: Int!,
    film_project: Boolean, 
    avi_roles_on_project: Avi_RolesCreateInput!,  #using naming convention from generated Prisma Client 
    project_media: Media_ItemCreateInput,     #Prisma Client names this Media_ItemCreateManyInput, which then resolves to createInput --> I handle this the mutation
    project_category: Project_CategoryCreateInput #Prisma Client naming
    ): Project
}


# PROJECT TYPES
type Project {
  id: ID!
  project_name: String!
  project_year: Int!
  film_project: Boolean
  avi_roles_on_project: Avi_Roles!
  project_media: [Media_Item]
  project_category: Project_Category   
}


type Avi_Roles {
  avi_director: Boolean
  avi_gaffer: Boolean
  avi_cinematographer: Boolean
  avi_writer: Boolean
  avi_camera_operator: Boolean
  avi_lighting_technician: Boolean
  avi_front_end_dev: Boolean
  avi_back_end_dev: Boolean
  avi_full_stack_dev: Boolean
}


type Media_Item {
  id: ID!
  banner_image_url: String
  video_url: String
} 


type Project_Category {
  short_film: Boolean
  feature_film: Boolean
}


# PROJECT INPUTS
input Media_ItemCreateInput {
  banner_image_url: String
  video_url: String
}

input Project_CategoryCreateInput {
  short_film: Boolean
  feature_film: Boolean
}


input Avi_RolesCreateInput {
  avi_director: Boolean
  avi_gaffer: Boolean
  avi_cinematographer: Boolean
  avi_writer: Boolean
  avi_camera_operator: Boolean
  avi_lighting_technician: Boolean
  avi_front_end_dev: Boolean
  avi_back_end_dev: Boolean
  avi_full_stack_dev: Boolean
}